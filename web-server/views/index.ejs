<!DOCTYPE html>
<html>
<head>
<style>
    /* CSS styles */

    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .row {
        display: flex;
        flex-direction: column; /* Change the flex direction to column */
        justify-content: center;
        align-items: center;
    }

    .col {
        margin: 10px 0; /* Add margin to separate the options */
    }

    h1 {
        font-size: 48px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    h2 {
        font-size: 24px;
        margin-bottom: 10px;
    }

    h4 {
        font-size: 16px;
        font-weight: bold;
        margin: 15px 0;
    }

    .button {
        margin: 10px;
        padding: 10px 20px;
        background-color: #008CBA;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    .button:hover {
        background-color: #0e4453;
    }

    .button-save {
        margin: 10px;
        padding: 10px 20px;
        background-color: #008CBA;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    .button-save:hover {
        background-color: #0e4453;
    }
    .custom-file-upload {
        padding: 5px; /* Reduce the padding to make the buttons smaller */
        border: 1px solid #ccc;
        display: inline-block;
        cursor: pointer;
        background-color: #45a049; /* Green background */
        color: white; /* White text */
        font-weight: bold;
        text-align: center;
        transition: background-color 0.3s ease;
        border-radius: 4px;
        font-size: 16px;
        padding: 10px 20px;
    }

    .custom-file-upload:hover {
        background-color: #007a9b; /* Darker green on hover */
    }

    .loader {
    border: 16px solid #f3f3f3; /* Light grey */
    border-top: 16px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
</head>
<body>
    <div display="flex" justify-content="center" align-items="center">
        <h1>Image Segmentation Tool</h1>
        <h2>Select what you want to do:</h2>

        <div class="row">
            <div class="col">
                <label for="personName">Your Name (required):</label>
                <input type="text" id="personName" name="personName" required placeholder="Enter your name" style="margin: 10px; padding: 10px;">
            </div>
        </div>
  
        <div class="row">
            <div class="col">
                <button class="button" id="manualSegmentationButton">Manual Segmentation</button>
            </div>
        </div>
        
        <div class="row">
            <div class="col">
                <button class="button" id="samSegmentationButton">SAM Segmentation</button>
            </div>
        </div>

        <div class="row">
             <div class="col">
            <button id="preProcessFolderButton" class="button">Precompute Embeddings</button>
            <input type="text" id="folderName" name="folderName" list="folderList" placeholder="Enter the folder name" style="margin: 10px; padding: 10px;"/> 
            <datalist id="folderList"></datalist> 
            <div id="loader" class="loader" style="display: none;"></div>
            <div id="precomputeResult" style="margin-top:10px;font-family:monospace;"></div>
            </div>
        </div> 
        </div>
        <script>
        //check if name_of_person is in the URL
        const urlParams = new URLSearchParams(window.location.search);
        const name_of_person = urlParams.get('name_of_person');
        if (name_of_person) {
            document.getElementById('personName').value = name_of_person;
        }

          document.addEventListener('DOMContentLoaded', function() {
                const inputField = document.getElementById('folderName');
                
                inputField.addEventListener('click', async function() {
                    // Check if the list is already populated to avoid refetching
                    if(document.getElementById('folderList').options.length === 0) {
                        try {
                            const response = await fetch('<%= apiUrl %>/data/list');
                            const data = await response.json();
                            const folderList = document.getElementById('folderList');

                            const folders = data.folders;

                            folders.forEach(function(folder) {
                                console.log(folder);
                                const option = document.createElement('option');

                                option.value = folder;

                                folderList.appendChild(option);
                            });

                        } catch (error) {
                            console.error('Error:', error);
                            alert('Error: ' + error);
                        }
                    }
                });
           });

           document.addEventListener('DOMContentLoaded', function() {
                const manualButton = document.getElementById('manualSegmentationButton');
                const samButton = document.getElementById('samSegmentationButton');
                const personNameInput = document.getElementById('personName');

                function formatNameAndNavigate(baseUrl) {
                    let personName = personNameInput.value.trim().replace(/\s+/g, '_');
                    if (personName) { // Ensure the name is not empty
                        window.location.href = `${baseUrl}?name_of_person=${personName}`;
                    } else {
                        alert('Please enter your name');
                    }
                }

                manualButton.addEventListener('click', function() {
                    formatNameAndNavigate('/manual');
                });

                samButton.addEventListener('click', function() {
                    formatNameAndNavigate('/sam');
                });
            }); 


           document.querySelector('#preProcessFolderButton').addEventListener('click', async function() {
                const folderNameEl = document.getElementById('folderName');
                var folderName = folderNameEl.value.trim();
                if(!folderName){
                    alert('Please enter a folder name');
                    return;
                }

                document.getElementById('loader').style.display = 'block';
                document.getElementById('precomputeResult').textContent = '';
                try {
                    const response = await fetch('<%= apiUrl %>/precompute/folder', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ folderName })
                    });
                    const data = await response.json();
                    document.getElementById('loader').style.display = 'none';
                    if(!response.ok){
                        alert('Error: ' + (data.error || 'Unknown error'));
                        return;
                    }
                    document.getElementById('precomputeResult').textContent = `Group: ${data.group} | created: ${data.created} | skipped: ${data.skipped}`;
                } catch (error) {
                    console.error('Error:', error);
                    document.getElementById('loader').style.display = 'none';
                    alert('Error: ' + error);
                }
            });
    </script>
</body>
</html>
